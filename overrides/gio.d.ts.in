
export interface SettingsSchema {
    _realGetKey: typeof SettingsSchema.prototype.get_key;
}

export interface Settings {
    _realInit: Function;
    _keys: string[];
    _children: string[];
    _realMethods: typeof Settings.prototype;
}
  
export interface DBus {
    readonly session: DBusConnection;
    readonly system: DBusConnection;
  
    // Namespace some functions
    get: typeof bus_get;
    get_finish: typeof bus_get_finish;
    get_sync: typeof bus_get_sync;
  
    own_name: typeof bus_own_name;
    own_name_on_connection: typeof bus_own_name_on_connection;
    unown_name: typeof bus_unown_name;
  
    watch_name: typeof bus_watch_name;
    watch_name_on_connection: typeof bus_watch_name_on_connection;
    unwatch_name: typeof bus_unwatch_name;
}
  
export let DBus: DBus;
  
export interface DBusConnection {
    watch_name(name, flags, appeared, vanished): ReturnType<typeof bus_watch_name_on_connection>;
    unwatch_name(id): ReturnType<typeof bus_unwatch_name>;
    own_name(name, flags, acquired, lost): ReturnType<typeof bus_own_name_on_connection>;
    unown_name(id): ReturnType<typeof bus_unown_name>;
}
  
export interface DBusProxy {
    connectSignal(...args: any[]): any;
    disconnectSignal(...args: any[]): any;
}
  
export module DBusProxy {
    function makeProxyWrapper(...args: any[]): any;
}
  
export interface DBusExportedObject {
    wrapJSObject(info: any, obj: any): any;
}
  
export let DBusExportedObject: DBusExportedObject;
  
export function _promisify(...args: any[]): any;
  
export let _LocalFilePrototype: File;
